package com.cmd.exchange.common.model;

import com.cmd.exchange.common.constants.TradeType;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;

import java.math.BigDecimal;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Accessors(chain = true)
public class Trade implements java.lang.Comparable<Trade> {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.id
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private Integer id;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.user_id
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private Integer userId;

    /**
     * Database Column Remarks:
     * 需要买入或卖出的币种，作为货物
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.coin_name
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private String coinName;

    /**
     * Database Column Remarks:
     * 用于结算的货币，一般是平台的基本货币
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.settlement_currency
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private String settlementCurrency;

    /**
     * Database Column Remarks:
     * 购买或卖出币种的单价，就是买入或卖出1个coin_name所对应的结算货币的个数
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.price
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal price;

    /**
     * Database Column Remarks:
     * 卖出或卖出币种/货物的总数量
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.amount
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal amount;

    /**
     * Database Column Remarks:
     * 对于买入：提供的总费用（冻结），对于卖出：期待获取的总金额，等于price*amount,属于冗余字段
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.total_currency
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal totalCurrency;

    /**
     * Database Column Remarks:
     * 买入卖出类型，1：买入，2：卖出
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.type
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private int type;

    // 价格类型  0 限价交易， 1 市价交易
    private int priceType;

    /**
     * Database Column Remarks:
     * 已经成交的币(货物)数量
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.deal_coin
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal dealCoin;

    /**
     * Database Column Remarks:
     * 已经成交的结算货币数量，对于买入：已经花费的结算货币，对于卖出：已经赚取的结算货币数量（包括费用)
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.deal_currentcy
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal dealCurrency;

    /**
     * Database Column Remarks:
     * 交易已经产生的币种(获取)费用，对于买入：按成交价格收入的币中少了这个数量，对于卖出：没损失
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.fee_coin
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal feeCoin;

    /**
     * Database Column Remarks:
     * 交易已经产生的结算货币费用，对于买入：没损失，对于卖出：按成交价格收入的总结算货币中少了这个数量
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.fee_currentcy
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private BigDecimal feeCurrency;

    /**
     * Database Column Remarks:
     * 创建交易的时间
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.add_time
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private Integer addTime;

    /**
     * Database Column Remarks:
     * 最后一次成交的时间，如果是全部成交，就是交易结束的时间
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.last_trade_time
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private Integer lastTradeTime;

    /**
     * Database Column Remarks:
     * 状态，0：正常交易中，1：全部成交，2：交易已经取消，100：交易异常
     * <p>
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column t_trade.status
     *
     * @mbg.generated Thu Jun 21 10:03:28 CST 2018
     */
    private int status;

    private BigDecimal sellPrice;

    public int compareTo(Trade trade) {
        // 暂时不判断类型
        // 根据价格从低到高排序
        int priceCompare = price.compareTo(trade.getPrice());
        if (priceCompare != 0) {
            return priceCompare;
        }
        if (id.intValue() == trade.id.intValue()) return 0;
        // 交易的时候，优先匹配挂的买单中大的，卖的是挂单中小的
        // 价格相同，如果是买入，那么id小的大（优先交易），如果是卖出，那么id小的小（优先交易）
        if (type == TradeType.BUY.getValue()) {
            return (id < trade.id) ? 1 : -1;
        } else {
            return (id < trade.id) ? -1 : 1;
        }
    }

    public boolean equals(Object trade) {
        if (this == trade) return true;
        if (!(trade instanceof Trade)) return false;
        Trade _trade = (Trade) trade;
        return this.id.intValue() == _trade.getId().intValue();
    }
}